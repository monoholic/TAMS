<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.trito.tams.web.asset.regist.outofbook.mapper.OutOfBookMapper">
	 	 
	<select id="selectCountOutOfBook" resultType="int" parameterType="kr.co.trito.tams.comm.util.search.SearchCondition">
		select count(a.aset_no) cnt
		from tb_aset_mas a
		left outer join tb_com_code b  
		  on a.aset_type1 = b.code_id
		 and b.code_grp_id = 'AS_CLASS'
		left outer join tb_com_code c  
		  on a.aset_type2 = c.code_id
		 and c.code_grp_id = 'AS_CLASS'
		left outer join tb_com_code d  
		  on a.aset_type2 = d.code_id
		 and d.code_grp_id = 'AS_CLASS'
		left outer join tb_user e
		  on a.chrgr = e.user_id
		inner join tb_com_code f
		  on a.aset_stus = f.code_id
		 and f.code_grp_id = 'AS_STATUS'                
		where 1=1
		  and a.aset_out_book_yn = 'Y'
		  <if test="params.asetNo != '' and params.asetNo != null">
		  and a.aset_no = #{params.asetNo}
		  </if>
		  <if test="params.fromDate != '' and params.fromDate != null">
		  and a.reg_dt between #{params.fromDate} and #{params.toDate}
		  </if>
		  <if test="params.asetType1 != 'ALL' and params.asetType1 != ''">
		  and a.aset_type1 = #{params.asetType1}
		  </if>
		  <if test="params.asetType2 != 'ALL' and params.asetType2 != ''">
		  and a.aset_type2 = #{params.asetType2}
		  </if>
		  <if test="params.asetType3 != 'ALL' and params.asetType3 != ''">
		  and a.aset_type3 = #{params.asetType3}
		  </if>
		  <if test="params.bizDeptCd != '' and params.bizDeptCd != null">
		  and a.biz_dept_cd = #{params.bizDeptCd}
		  </if>
		  <if test="params.deptCd != '' and params.deptCd != null">
		  and a.dept_cd = #{params.deptCd}  
		  </if>
		  <if test="params.chrgr != '' and params.chrgr != null">
		  and e.user_nm like concat('%', #{params.chrgr}, '%')	
		  </if>
	</select>	 	   		
	
	<select id="selectOutOfBookList" resultType="kr.co.trito.tams.web.asset.regist.outofbook.dto.OutOfBookDto" parameterType="kr.co.trito.tams.comm.util.search.SearchCondition">
		select w.*
		     , x.dept_nm as bizDeptNm
		     , y.dept_nm as deptNm     
		     , case
		     	when (select count(*) cnt from tb_tag_mas x where x.aset_no = w.asetNo) > 0 then 'Y'
		        else 'N'
		       end as tagYn      
		from (
				select row_number() over(order by aset_no desc) as rn
				     , a.aset_no as asetNo
				     , a.aset_type1 as asetType1
				     , b.code_nm as asetTypeNm1
				     , a.aset_type2 as asetType2
				     , c.code_nm as asetTypeNm2     
				     , a.aset_type3 as asetType3
				     , d.code_nm as asetTypeNm3     
				     , a.mftco
				     , a.model
				     , a.sn
				     , a.biz_dept_cd as bizDeptCd
				     , a.dept_cd as deptCd
				     , a.chrgr
				     , e.user_nm  as chrgrNm
				     , a.aset_stus as asetStus
		     		 , f.code_nm as asetStusNm             
		             , date_format(a.reg_dt, '%Y-%m-%d') as regDt
				from tb_aset_mas a
				left outer join tb_com_code b  
				  on a.aset_type1 = b.code_id
				 and b.code_grp_id = 'AS_CLASS'
				left outer join tb_com_code c  
				  on a.aset_type2 = c.code_id
				 and c.code_grp_id = 'AS_CLASS'
				left outer join tb_com_code d  
				  on a.aset_type2 = d.code_id
				 and d.code_grp_id = 'AS_CLASS'
				left outer join tb_user e
				  on a.chrgr = e.user_id
				inner join tb_com_code f
				  on a.aset_stus = f.code_id
				 and f.code_grp_id = 'AS_STATUS'                
				where 1=1
				  and a.aset_out_book_yn = 'Y'
				  <if test="params.asetNo != '' and params.asetNo != null">
				  and a.aset_no = #{params.asetNo}
				  </if>
				  <if test="params.fromDate != '' and params.fromDate != null">
				  and a.reg_dt between #{params.fromDate} and #{params.toDate}
				  </if>
				  <if test="params.asetType1 != 'ALL' and params.asetType1 != ''">
				  and a.aset_type1 = #{params.asetType1}
				  </if>
				  <if test="params.asetType2 != 'ALL' and params.asetType2 != ''">
				  and a.aset_type2 = #{params.asetType2}
				  </if>
				  <if test="params.asetType3 != 'ALL' and params.asetType3 != ''">
				  and a.aset_type3 = #{params.asetType3}
				  </if>
				  <if test="params.bizDeptCd != '' and params.bizDeptCd != null">
				  and a.biz_dept_cd = #{params.bizDeptCd}
				  </if>
				  <if test="params.deptCd != '' and params.deptCd != null">
				  and a.dept_cd = #{params.deptCd}  
				  </if>
				  <if test="params.chrgrNm != '' and params.chrgrNm != null">
				  and e.user_nm like concat('%', #{params.chrgrNm}, '%')	
				  </if>       
		     ) w
		left outer join tb_dept x
		  on w.bizDeptCd = x.dept_cd
		left outer join tb_dept y
		  on w.deptCd = y.dept_cd
		where rn between #{start} and #{end}
	</select>	
	
	<select id="selectMaxAsetNo" resultType="int">
		select max(maxAsetNo) as maxAsetNo
		from (
				select 1 as maxAsetNo
				union all
				select cast(substring(aset_no, 6) as int) + 1 as maxAsetNo 
				from tb_aset_mas   
				where aset_no like concat('A', substring(date_format(now(),'%Y%m'), 3), '%')
			 ) a        
	</select>	
	
	<insert id="saveAsetMas" parameterType="Map">
				insert into tb_aset_mas(aset_no, aset_nm, aset_type1, aset_type2, aset_type3, mftco
					                  , model, sn, biz_dept_cd, dept_cd, chrgr, bsplc, buld, floor
					                  , loc, exp_dept_cd, exp_acct, dur_year, acq_prc, sval_prc
					                  , dprc_prc, acq_dt, aset_out_book_yn, aset_stus, regr, reg_dt)
				                 values 
				                 ( 
						           (case 
						        	  when substring(#{asetNo}, 1, 1) = 'A' then #{asetNo}
						         	  else concat('A', substring(date_format(now(), '%Y%m'), 3), lpad(#{asetNo}, 5, 0)) 
						            end)				                 
				                 , #{asetNm}
				                 , #{asetType1}
				                 , #{asetType2}
				                 , #{asetType3}
				                 , #{mftco}
				                 , #{model}
				                 , #{sn}
				                 , #{bizDeptCd}
				                 , #{deptCd}
				                 , #{chrgr}
				                 , #{bsplc}
				                 , #{buld}
				                 , #{floor}
				                 , #{loc}
				                 , #{expDeptCd} 
				                 , #{expAcct}
				                 , #{durYear}
				                 , (case when #{acqPrc} = '' then null else #{acqPrc} end)
				                 , (case when #{svalPrc} = '' then null else #{svalPrc} end)
				                 , (case when #{dprcPrc} = '' then null else #{dprcPrc} end)					                 
				                 , replace(#{acqDt}, '-', '')
				                 , 'N'
				                 , '10'
				                 , #{regr}
				                 , now()
				                   )
				                 on duplicate key
				                 update aset_nm = #{asetNm}
				                      , aset_type1 = #{asetType1}
				                      , aset_type2 = #{asetType2}
				                      , aset_type3 = #{asetType3}
				                      , mftco = #{mftco}
				                      , model = #{model}
				                      , sn = #{sn}
				                      , biz_dept_cd = #{bizDeptCd}
				                      , dept_cd = #{deptCd}
				                      , chrgr = #{chrgr}
				                      , bsplc = #{bsplc}
				                      , buld = #{buld}
				                      , floor = #{floor}
				                      , loc = #{loc}
				                      , exp_dept_cd = #{expDeptCd}
				                      , exp_acct = #{expAcct}
				                      , dur_year = #{durYear}
				                      , acq_prc = (case when #{acqPrc} = '' then null else #{acqPrc} end)
				                      , sval_prc = (case when #{svalPrc} = '' then null else #{svalPrc} end) 
				                      , dprc_prc= (case when #{dprcPrc} = '' then null else #{dprcPrc} end) 
				                      , acq_dt = replace(#{acqDt}, '-', '')
				                      , updr = #{updr}
				                      , up_dt = now()
	</insert>	
	
	<insert id="saveAsetDtl" parameterType="Map">
				insert into tb_aset_dtl(aset_no, aset_type, dtl_info1, dtl_info2, dtl_info3, dtl_info4
				                      , dtl_info5, dtl_info6, dtl_info7, dtl_info8, dtl_info9, dtl_info10
				                      , dtl_info11, dtl_info12, dtl_info13, dtl_info14, dtl_info15, dtl_info16
				                      , dtl_info17, dtl_info18, dtl_info19, dtl_info20, dtl_info21, dtl_info22
				                      , dtl_info23, dtl_info24, dtl_info25, dtl_info26, dtl_info27, dtl_info28
				                      , dtl_info29, dtl_info30, dtl_info31, dtl_info32, dtl_info33, dtl_info34
				                      , dtl_info35, dtl_info36, dtl_info37, dtl_info38, dtl_info39, dtl_info40
				                      , dtl_info41, dtl_info42, dtl_info43, dtl_info44, dtl_info45, dtl_info46
				                      , dtl_info47, dtl_info48, dtl_info49, dtl_info50, regr, reg_dt)
				                 values 
				                 ( 
						           (case 
						        	  when substring(#{asetNo}, 1, 1) = 'A' then #{asetNo}
						         	  else concat('A', substring(date_format(now(), '%Y%m'), 3), lpad(#{asetNo}, 5, 0)) 
						            end)					                 				                 
				                 , #{asetType3}
				                 , #{dtlInfo1}
								 , #{dtlInfo2}
								 , #{dtlInfo3}
								 , #{dtlInfo4}
								 , #{dtlInfo5}
								 , #{dtlInfo6}
								 , #{dtlInfo7}
								 , #{dtlInfo8}
								 , #{dtlInfo9}
								 , #{dtlInfo10}
								 , #{dtlInfo11}
								 , #{dtlInfo12}
								 , #{dtlInfo13}
								 , #{dtlInfo14}
								 , #{dtlInfo15}
								 , #{dtlInfo16}
								 , #{dtlInfo17}
								 , #{dtlInfo18}
								 , #{dtlInfo19}
								 , #{dtlInfo20}
								 , #{dtlInfo21}
								 , #{dtlInfo22}
								 , #{dtlInfo23}
								 , #{dtlInfo24}
								 , #{dtlInfo25}
								 , #{dtlInfo26}
								 , #{dtlInfo27}
								 , #{dtlInfo28}
								 , #{dtlInfo29}
								 , #{dtlInfo30}
								 , #{dtlInfo31}
								 , #{dtlInfo32}
								 , #{dtlInfo33}
								 , #{dtlInfo34}
								 , #{dtlInfo35}
								 , #{dtlInfo36}
								 , #{dtlInfo37}
								 , #{dtlInfo38}
								 , #{dtlInfo39}
								 , #{dtlInfo40}
								 , #{dtlInfo41}
								 , #{dtlInfo42}
								 , #{dtlInfo43}
								 , #{dtlInfo44}
								 , #{dtlInfo45}
								 , #{dtlInfo46}
								 , #{dtlInfo47}
								 , #{dtlInfo48}
								 , #{dtlInfo49}
								 , #{dtlInfo50}
				                 , #{regr}
				                 , now()
				                   )
				                 on duplicate key
				                 update  aset_type = #{asetType3}
								 	 , dtl_info1 = #{dtlInfo1}
								 	 , dtl_info2 = #{dtlInfo2}
								 	 , dtl_info3 = #{dtlInfo3}
								 	 , dtl_info4 = #{dtlInfo4}
								 	 , dtl_info5 = #{dtlInfo5}
								 	 , dtl_info6 = #{dtlInfo6}
								 	 , dtl_info7 = #{dtlInfo7}
								 	 , dtl_info8 = #{dtlInfo8}
								 	 , dtl_info9 = #{dtlInfo9}
								 	 , dtl_info10 = #{dtlInfo10}
								 	 , dtl_info11 = #{dtlInfo11}
								 	 , dtl_info12 = #{dtlInfo12}
								 	 , dtl_info13 = #{dtlInfo13}
								 	 , dtl_info14 = #{dtlInfo14}
								 	 , dtl_info15 = #{dtlInfo15}
								 	 , dtl_info16 = #{dtlInfo16}
								 	 , dtl_info17 = #{dtlInfo17}
								 	 , dtl_info18 = #{dtlInfo18}
								 	 , dtl_info19 = #{dtlInfo19}
								 	 , dtl_info20 = #{dtlInfo20}
								 	 , dtl_info21 = #{dtlInfo21}
								 	 , dtl_info22 = #{dtlInfo22}
								 	 , dtl_info23 = #{dtlInfo23}
								 	 , dtl_info24 = #{dtlInfo24}
								 	 , dtl_info25 = #{dtlInfo25}
								 	 , dtl_info26 = #{dtlInfo26}
								 	 , dtl_info27 = #{dtlInfo27}
								 	 , dtl_info28 = #{dtlInfo28}
								 	 , dtl_info29 = #{dtlInfo29}
								 	 , dtl_info30 = #{dtlInfo30}
								 	 , dtl_info31 = #{dtlInfo31}
								 	 , dtl_info32 = #{dtlInfo32}
								 	 , dtl_info33 = #{dtlInfo33}
								 	 , dtl_info34 = #{dtlInfo34}
								 	 , dtl_info35 = #{dtlInfo35}
								 	 , dtl_info36 = #{dtlInfo36}
								 	 , dtl_info37 = #{dtlInfo37}
								 	 , dtl_info38 = #{dtlInfo38}
								 	 , dtl_info39 = #{dtlInfo39}
								 	 , dtl_info40 = #{dtlInfo40}
								 	 , dtl_info41 = #{dtlInfo41}
								 	 , dtl_info42 = #{dtlInfo42}
								 	 , dtl_info43 = #{dtlInfo43}
								 	 , dtl_info44 = #{dtlInfo44}
								 	 , dtl_info45 = #{dtlInfo45}
								 	 , dtl_info46 = #{dtlInfo46}
								 	 , dtl_info47 = #{dtlInfo47}
								 	 , dtl_info48 = #{dtlInfo48}
								 	 , dtl_info49 = #{dtlInfo49}
								 	 , dtl_info50 = #{dtlInfo50}
				                     , updr = #{updr}
				                     , up_dt = now() 
	</insert>	

   	<delete id="deleteAsetMas" parameterType="Map">
   		delete from tb_aset_mas
   		where aset_no = #{assetNo}
   	</delete>   	  	
	
   	<delete id="deleteAsetDtl" parameterType="Map">
   		delete from tb_aset_dtl
   		where aset_no = #{assetNo}
   	</delete>   
   	
   	<delete id="deleteUploadHistory" parameterType="String">
   		delete from tb_upload_outofbook
   		where regr = #{userId}
   	</delete>      	
   	
	<insert id="saveUploadExcel" parameterType="kr.co.trito.tams.web.asset.regist.outofbook.dto.OutOfBookBatchDto">
		insert into tb_upload_outofbook(
					 aset_no
					,aset_nm
					,aset_type1
					,aset_type2
					,aset_type3
					,mftco
					,model
					,sn
					,biz_dept_cd
					,dept_cd
					,chrgr
					,bsplc
					,buld
					,floor
					,loc
					,acq_prc
					,acq_dt
					,dtl_info1
					,dtl_info2
					,dtl_info3
					,dtl_info4
					,dtl_info5
					,dtl_info6
					,dtl_info7
					,dtl_info8
					,dtl_info9
					,dtl_info10
					,dtl_info11
					,dtl_info12
					,dtl_info13
					,dtl_info14
					,dtl_info15
					,dtl_info16
					,dtl_info17
					,dtl_info18
					,dtl_info19
					,dtl_info20
					,regr				
				) values ( 			                 				                 
                   #{asetNo}
                 , #{asetNm}
				 , #{asetType1}
				 , #{asetType2}
				 , #{asetType3}
				 , #{mftco}
				 , #{model}
				 , #{sn}
				 , #{bizDeptCd}
				 , #{deptCd}
				 , #{chrgr}
				 , #{bsplc}
				 , #{buld}
				 , #{floor}
				 , #{loc}
				 , #{acqPrc}
				 , #{acqDt}
				 , #{dtlInfo1}
				 , #{dtlInfo2}
				 , #{dtlInfo3}
				 , #{dtlInfo4}
				 , #{dtlInfo5}
				 , #{dtlInfo6}
				 , #{dtlInfo7}
				 , #{dtlInfo8}
				 , #{dtlInfo9}
				 , #{dtlInfo10}
				 , #{dtlInfo11}
				 , #{dtlInfo12}
				 , #{dtlInfo13}
				 , #{dtlInfo14}
				 , #{dtlInfo15}
				 , #{dtlInfo16}
				 , #{dtlInfo17}
				 , #{dtlInfo18}
				 , #{dtlInfo19}
				 , #{dtlInfo20}
                 , #{regr}
                 )				               
	</insert>	   	

	<select id="selectUploadResultList" resultType="kr.co.trito.tams.web.asset.regist.outofbook.dto.OutOfBookBatchDto" parameterType="String">
		select * 
		from (
				select a.aset_no as asetNo
				    , (select count(*) from tb_aset_mas x where x.aset_no = a.aset_no) as asetNoCnt
					,a.aset_nm as asetNm
					,a.aset_type1 as asetType1
				    ,b.code_nm as asetTypeNm1 
					,a.aset_type2 as asetType2
				    ,c.code_nm as asetTypeNm2    
					,a.aset_type3 as asetType3
				    ,c.code_nm as asetTypeNm3
					,a.mftco
					,a.model
					,a.sn
					,a.biz_dept_cd as bizDeptCd
				    ,e.dept_nm as bizDeptNm
					,a.dept_cd
				    ,f.dept_nm as deptNm   
					,a.chrgr
					,g.user_nm as chrgrNm
					,a.bsplc
					,a.buld
					,a.floor
					,a.loc
					,a.acq_prc as acqPrc
					,a.acq_dt as acqDt
					,a.dtl_info1 as dtlInfo1
					,a.dtl_info2 as dtlInfo2
					,a.dtl_info3 as dtlInfo3
					,a.dtl_info4 as dtlInfo4
					,a.dtl_info5 as dtlInfo5
					,a.dtl_info6 as dtlInfo6
					,a.dtl_info7 as dtlInfo7
					,a.dtl_info8 as dtlInfo8
					,a.dtl_info9 as dtlInfo9
					,a.dtl_info10 as dtlInfo10
					,a.dtl_info11 as dtlInfo11
					,a.dtl_info12 as dtlInfo12
					,a.dtl_info13 as dtlInfo13
					,a.dtl_info14 as dtlInfo14
					,a.dtl_info15 as dtlInfo15
					,a.dtl_info16 as dtlInfo16
					,a.dtl_info17 as dtlInfo17
					,a.dtl_info18 as dtlInfo18
					,a.dtl_info19 as dtlInfo19
					,a.dtl_info20 as dtlInfo20
					,a.regr
				from  tb_upload_outofbook a
				left outer join tb_com_code b
				  on a.aset_type1 = b.code_id
				 and b.code_grp_id = 'AS_CLASS'
				left outer join tb_com_code c
				  on a.aset_type2 = c.code_id
				 and c.code_grp_id = 'AS_CLASS'
				left outer join tb_com_code d
				  on a.aset_type3 = d.code_id
				 and d.code_grp_id = 'AS_CLASS' 
				left outer join tb_dept e
				  on a.biz_dept_cd = e.dept_cd  
				left outer join tb_dept f
				  on a.dept_cd = f.dept_cd    
				left outer join tb_user g
				  on a.chrgr = g.user_id				  
				where a.regr = #{userId}   
			 ) a        
	</select>	
		
	<insert id="saveBatchOutOfBookAset" parameterType="kr.co.trito.tams.web.asset.regist.outofbook.dto.OutOfBookBatchDto">
				insert into tb_aset_mas(
                	 aset_no
                    ,aset_nm
                    ,aset_type1
                    ,aset_type2
                    ,aset_type3
                    ,mftco
                    ,model
                    ,sn
                    ,biz_dept_cd
                    ,dept_cd
                    ,chrgr
                    ,bsplc
                    ,buld
                    ,floor
                    ,loc
                    ,acq_prc
                    ,acq_dt
                    ,aset_out_book_yn
                    ,aset_stus
                    ,regr
                ) values (
                	#{asetNo}
                	,#{asetNm}
                	,#{asetType1}
                	,#{asetType2}
                	,#{asetType3}
                	,#{mftco}
                	,#{model}
                	,#{sn}
                	,#{bizDeptCd}
                	,#{deptCd}
                	,#{chrgr}
                	,#{bsplc}
                	,#{buld}
                	,#{floor}
                	,#{loc}
                	,#{acqPrc}
                	,#{acqDt}               	
                    ,'Y'
                    ,'10'
                	,#{regr}                    
                )	
	</insert>	
	<insert id="saveBatchOutOfBookAsetDtl" parameterType="kr.co.trito.tams.web.asset.regist.outofbook.dto.OutOfBookBatchDto">		
				insert into tb_aset_dtl(
                	aset_no
                    ,aset_type
                    ,dtl_info1
                    ,dtl_info2
                    ,dtl_info3
                    ,dtl_info4
                    ,dtl_info5
                    ,dtl_info6
                    ,dtl_info7
                    ,dtl_info8
                    ,dtl_info9
                    ,dtl_info10
                    ,dtl_info11
                    ,dtl_info12
                    ,dtl_info13
                    ,dtl_info14
                    ,dtl_info15
                    ,dtl_info16
                    ,dtl_info17
                    ,dtl_info18
                    ,dtl_info19
                    ,dtl_info20
                    ,regr
                ) values (
                	#{asetNo}
                	, #{asetType3}
					, #{dtlInfo1}
					, #{dtlInfo2}
					, #{dtlInfo3}
					, #{dtlInfo4}
					, #{dtlInfo5}
					, #{dtlInfo6}
					, #{dtlInfo7}
					, #{dtlInfo8}
					, #{dtlInfo9}
					, #{dtlInfo10}
					, #{dtlInfo11}
					, #{dtlInfo12}
					, #{dtlInfo13}
					, #{dtlInfo14}
					, #{dtlInfo15}
					, #{dtlInfo16}
					, #{dtlInfo17}
					, #{dtlInfo18}
					, #{dtlInfo19}
					, #{dtlInfo20}              
					, #{regr}
                )	
	</insert>			
</mapper>